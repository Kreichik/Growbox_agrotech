#!/usr/bin/env python3
import os
import csv
import time
import datetime
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from collections import deque
import sqlite3
import requests
from dotenv import load_dotenv


# STATE_FILE_TO_RESET = "last_alert_time.txt"
# if os.path.exists(STATE_FILE_TO_RESET):
#     try:
#         os.remove(STATE_FILE_TO_RESET)
#         print(f"–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è '{STATE_FILE_TO_RESET}' —É–¥–∞–ª–µ–Ω. –ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω.")
#     except OSError as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

load_dotenv()

SENDER_EMAIL = os.getenv("ALERTER_EMAIL")
SENDER_PASSWORD = os.getenv("ALERTER_PASSWORD")
TEMP_MIN = 23.0
TEMP_MAX = 30.0
HUMIDITY_MIN = 40.0
HUMIDITY_MAX = 60.0
CHECK_INTERVAL_SECONDS = 10
DATA_MAX_AGE_MINUTES = 15
ALERT_COOLDOWN_SECONDS = 60 * 120
BOT_TOKEN = os.getenv("BOT_TOKEN")
LAST_ALERT_STATE_FILE = "last_alert_time.txt"
CHECK_LOCK_FILE = "alert_check.lock"

DB_FILE = "telegram_users.db"


def send_alert_email(subject, body):
    if not SENDER_PASSWORD:
        print("–û–®–ò–ë–ö–ê: –ü–∞—Ä–æ–ª—å –¥–ª—è email –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT email FROM users WHERE email IS NOT NULL AND email != ''")
        recipients = [row[0] for row in cursor.fetchall()]
        conn.close()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ email'–æ–≤ –∏–∑ –ë–î: {e}")
        return

    if not recipients:
        print("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ Email-—Ä–∞—Å—Å—ã–ª–∫—É.")
        return

    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain', 'utf-8'))

        server = smtplib.SMTP_SSL('smtp.mail.ru', 465)
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.sendmail(SENDER_EMAIL, recipients, msg.as_string())
        server.quit()
        print(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {len(recipients)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")


def send_telegram_alert(body: str):
    print("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ Telegram...")
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE notifications_enabled = 1")
        user_ids = [row[0] for row in cursor.fetchall()]
        conn.close()

        if not user_ids:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ Telegram.")
            return

        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        for user_id in user_ids:
            payload = {'chat_id': user_id, 'text': body}
            try:
                requests.post(url, json=payload, timeout=5)
            except requests.RequestException:
                pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_telegram_alert: {e}")


def check_and_alert():
    print("\n--- [DEBUG] –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ---")

    try:
        lock_fd = os.open(CHECK_LOCK_FILE, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
    except FileExistsError:
        print("[DEBUG] Lock-—Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥—Ä—É–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        return

    try:
        now = datetime.datetime.now()

        print("[DEBUG] 1. –ü—Ä–æ–≤–µ—Ä—è—é –∫—É–ª–¥–∞—É–Ω...")
        if os.path.isfile(LAST_ALERT_STATE_FILE):
            with open(LAST_ALERT_STATE_FILE, 'r') as f:
                try:
                    last_alert_timestamp = float(f.read().strip())
                    seconds_since_last_alert = (
                                now - datetime.datetime.fromtimestamp(last_alert_timestamp)).total_seconds()
                    if seconds_since_last_alert < ALERT_COOLDOWN_SECONDS:
                        print(
                            f"[DEBUG] –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å {int(ALERT_COOLDOWN_SECONDS - seconds_since_last_alert)} —Å–µ–∫. –í—ã—Ö–æ–¥.")
                        return
                except (ValueError, TypeError):
                    pass
        print("[DEBUG] –ö—É–ª–¥–∞—É–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")

        print("[DEBUG] 2. –ò—â—É —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö...")
        current_date = now.strftime("%Y-%m-%d")
        csv_filename = f'box_data/{current_date}.csv'
        if not os.path.isfile(csv_filename):
            print(f"[DEBUG] –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö {csv_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã—Ö–æ–¥.")
            return
        print(f"[DEBUG] –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω: {csv_filename}")

        print("[DEBUG] 3. –ß–∏—Ç–∞—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞...")
        with open(csv_filename, 'r', newline='') as f:
            last_row_iter = deque(csv.DictReader(f), maxlen=1)
        if not last_row_iter:
            print("[DEBUG] –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç. –í—ã—Ö–æ–¥.")
            return
        last_row = last_row_iter[0]
        print(f"[DEBUG] –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: {last_row}")

        print("[DEBUG] 4. –ü—Ä–æ–≤–µ—Ä—è—é –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö...")
        timestamp_str = last_row.get("timestamp", "")
        if not timestamp_str:
            print("[DEBUG] –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã—Ö–æ–¥.")
            return
        try:
            timestamp_dt = datetime.datetime.fromisoformat(timestamp_str)
            data_age_seconds = (now - timestamp_dt).total_seconds()
            if data_age_seconds > DATA_MAX_AGE_MINUTES * 60:
                print(f"[DEBUG] –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ ({int(data_age_seconds)} —Å–µ–∫). –í—ã—Ö–æ–¥.")
                return
        except ValueError:
            print(f"[DEBUG] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏: '{timestamp_str}'. –í—ã—Ö–æ–¥.")
            return
        print(f"[DEBUG] –í–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ—Ä–º–µ ({int(data_age_seconds)} —Å–µ–∫).")

        print("[DEBUG] 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏...")
        problem_messages = []

        air_temp_str = last_row.get("air_temperature", "").strip()
        if air_temp_str:
            try:
                air_temp = float(air_temp_str)
                print(f"[DEBUG]   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {air_temp}¬∞C")
                if air_temp < TEMP_MIN or air_temp > TEMP_MAX:
                    problem_messages.append(f"‚ùóÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {air_temp}¬∞C (–Ω–æ—Ä–º–∞: {TEMP_MIN}-{TEMP_MAX}¬∞C)")
            except ValueError:
                print(f"[DEBUG]   –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: '{air_temp_str}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
        else:
            print("[DEBUG]   –ü–æ–ª–µ 'air_temperature' –ø—É—Å—Ç–æ–µ.")

        air_humidity_str = last_row.get("air_humidity", "").strip()
        if air_humidity_str:
            try:
                air_humidity = float(air_humidity_str)
                print(f"[DEBUG]   –í–ª–∞–∂–Ω–æ—Å—Ç—å: {air_humidity}%")
                if air_humidity < HUMIDITY_MIN or air_humidity > HUMIDITY_MAX:
                    problem_messages.append(f"‚ùóÔ∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å: {air_humidity}% (–Ω–æ—Ä–º–∞: {HUMIDITY_MIN}-{HUMIDITY_MAX}%)")
            except ValueError:
                print(f"[DEBUG]   –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: '{air_humidity_str}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
        else:
            print("[DEBUG]   –ü–æ–ª–µ 'air_humidity' –ø—É—Å—Ç–æ–µ.")

        if problem_messages:
            print("Alerter: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ...")
            subject = "üö® –°—Ä–æ—á–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"

            full_body = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n\n"
            full_body += "\n".join(problem_messages)
            full_body += "\n\n" + "=" * 40 + "\n\n–ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï:\n"
            for key, value in last_row.items():
                full_body += f"- {key.replace('_', ' ').capitalize()}: {value}\n"

            send_alert_email(subject, full_body)

            send_telegram_alert(full_body)

            with open(LAST_ALERT_STATE_FILE, 'w') as f:
                f.write(str(datetime.datetime.now().timestamp()))
        else:
            print("Alerter: –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ.")

    finally:
        os.close(lock_fd)
        os.remove(CHECK_LOCK_FILE)


if __name__ == '__main__':
    print("--- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (Alerter) ---")
    while True:
        check_and_alert()
        time.sleep(CHECK_INTERVAL_SECONDS)